#! /usr/bin/env sh

# BlueScan - Escáner de dispositivos Bluetooth
# by ~aKira~ 
# akira[PUNTO]azul[ARROBA]gmail[PUNTO]com
# http://debianizado.net/
# PGP Key ID 385E02A5

declare -a Dev
declare -a Scan
declare -a Dispositivos
declare -a Nombre
declare -a Provider
declare -a Canales

trap 'Contador; echo; echo Se han detectado $NUM_DISP dispositivos durante el rastreo; echo Duración de la sesión: "$HORAS"h "$MIN"m "$SEG"s; sleep 3; tput cnorm; exit 0' SIGINT

### Funciones ###

Inicio() {

# Comprobando las herramientas
	
	HCICONFIG="/usr/sbin/hciconfig"

	if [ -x $HCICONFIG ]
		then
			Dev=($($HCICONFIG))
			DEV=$(echo ${Dev[0]} | cut -f1 -d ":")
		else
			echo "Es necesario el paquete bluez-utils"
			sleep 2
			exit
	fi

# Comprobando si hay adaptador de Bluetooth

	echo hc > /tmp/f1
	echo $DEV | cut -f1 -d "i" > /tmp/f2
	RES=$(cmp /tmp/f1 /tmp/f2)
	rm /tmp/f1 /tmp/f2
	if [ -z "$RES" ]
		then
			ADAP=${Dev[5]}  # Capturamos la BT_ADDR
			export FOO=1
		else
			echo "No se ha encontrado un adaptador de Bluetooth en el equipo"
			sleep 2
			exit
	fi

# Banner
	
	CURSOR=$(tput cols)/2
	let CURSOR=$CURSOR-24
	clear
	tput civis
	tput cup 1 $CURSOR
	tput setf 3
	echo øøøøø BlueScan - Wardriver para Bluetooth øøøøø
	tput cup 2 $CURSOR
	echo "              c0ded by ~aKira~"
	tput sgr0
	echo
	echo
	echo Usando BD Address $ADAP
	echo Dispositivos detectados [Ctrl+c para terminar]:
	echo

# Inicializamos el contador
	
	if [ $(date | cut -f4 -d " " | wc -m) -ne 9 ]
		then
			COM=$(date | cut -f5 -d " ")
		else
			COM=$(date | cut -f4 -d " ")
	fi
	if [ $(echo $COM | cut -f1 -d ":" | cut -b 1) -eq 0 ]
		then
			HINI=$(echo $COM | cut -f1 -d ":" | cut -b 2)
		else
			HINI=$(echo $COM | cut -f1 -d ":")
	fi
	if [ $(echo $COM | cut -f2 -d ":" | cut -b 1) -eq 0 ]
		then
			MINI=$(echo $COM | cut -f2 -d ":" | cut -b 2)
		else
			MINI=$(echo $COM | cut -f2 -d ":")
	fi
	if [ $(echo $COM | cut -f3 -d ":" | cut -b 1) -eq 0 ]
		then
			SINI=$(echo $COM | cut -f3 -d ":" | cut -b 2)
		else
			SINI=$(echo $COM | cut -f3 -d ":")
	fi
	let T_INI=$HINI*3600+$MINI*60+$SINI
	}

# Contador de tiempo de sesión

Contador() {
	export HORAS=0
	export MIN=0
	export SEG=0
	if [ $(date | cut -f4 -d " " | wc -m) -ne 9 ]  
		then
			FINAL=$(date | cut -f5 -d " ")
		else
			FINAL=$(date | cut -f4 -d " ")
	fi
	if [ $(echo $FINAL | cut -f1 -d ":" | cut -b 1) -eq 0 ]
		then
			HFIN=$(echo $FINAL | cut -f1 -d ":" | cut -b 2)
		else
			HFIN=$(echo $FINAL | cut -f1 -d ":")
	fi
	if [ $(echo $FINAL | cut -f2 -d ":" | cut -b 1) -eq 0 ]
		then
			MFIN=$(echo $FINAL | cut -f2 -d ":" | cut -b 2)
		else
			MFIN=$(echo $FINAL | cut -f2 -d ":")
	fi
	if [ $(echo $FINAL | cut -f3 -d ":" | cut -b 1) -eq 0 ]
		then 
			SFIN=$(echo $FINAL | cut -f3 -d ":" | cut -b 2)
		else
			SFIN=$(echo $FINAL | cut -f3 -d ":")
	fi
	let T_FIN=$HFIN*3600+$MFIN*60+$SFIN
	let TIEMPO=$T_FIN-$T_INI
	let HORAS=$TIEMPO/3600
	let MIN=($TIEMPO-$HORAS*3600)/60
	let SEG=($TIEMPO-$HORAS*3600)-$MIN*60
	}

# Discrimina los dispositivos

export NUM_DISP=0

Discrimina() {
	FLAG=0
	echo $1 > /tmp/d1
	for DISPOS in ${Dispositivos[@]}
		do
			echo $DISPOS > /tmp/d2
			RES=$(cmp  /tmp/d1 /tmp/d2)
			if [ -z "$RES" ]
				then
					FLAG=1
					rm /tmp/d1 /tmp/d2
					break
			fi
		done
	if [ $FLAG -eq 0 ]
		then
			Dispositivos="${Dispositivos[*]} $1"
			let NUM_DISP=$NUM_DISP+1
	fi
	}

Imprime() {
	CHOP=-30
	case $1 in
		-a)	echo
			echo -n "Dispositivo: "
			tput setf 3
			echo $2 ;;
		-b)	echo -n "Nombre: "
			tput setf 3
			until [ $CHOP -gt $# ]
				do
					echo -n "$2 "
					shift
					let CHOP=$CHOP+1
				done
			echo ;;
		-c)	echo -n "Fabricante: "
			tput setf 3
			echo $2 ;;
		-d) 	echo -n "Servicios activos: "
			tput setf 3
			until [ $CHOP -gt $# ]
				do
					echo -n "$2 "
					shift
					let CHOP=$CHOP+1
				done
			echo ;;
		-e)	echo -n "Canales activos: "
			tput setf 3
			until [ $CHOP -gt $# ]
				do
					echo -n "$2 "
					shift
					let CHOP=$CHOP+1
				done
			echo ;;
		-f)	echo -n "Hora: "
			tput setf 3
			echo $2 ;;
	esac
	tput sgr0
	}

# Scanner

Scanner() {
	RETARDO=15  # Retardo que frena el bucle ante un dispositivo permanentemente presente
	let TS2=60+$RETARDO
	while [ $FOO -eq 1 ]
		do
			if [ $(date | cut -f4 -d " " | cut -f3 -d ":" | cut -b 1) -eq 0 ]
				then
					TS1=$(date | cut -f4 -d " " | cut -f3 -d ":" | cut -b 2)
				else
					TS1=$(date | cut -f4 -d " " | cut -f3 -d ":")
			fi
			let TS1=$TS1+$RETARDO
			if [ $TS1 -gt $TS2 ]   # Si ha pasado menos que RETARDO, esperamos
				then
					sleep $RETARDO
			fi
			Scan=($(hcitool -i $1 scan))
			INI=2
			FIN=${#Scan[@]}
			if [ $FIN -gt 2 ] # Si se detecta algún dispositivo
				then
					if [ $(date | cut -f4 -d " " | cut -f3 -d ":" | cut -b 1) -eq 0 ]
						then
							TS2=$(date | cut -f4 -d " " | cut -f3 -d ":" | cut -b 2)
						else
							TS2=$(date | cut -f4 -d " " | cut -f3 -d ":")
					fi
					while [ $INI -le $FIN ]
						do
							Imprime -a ${Scan[$INI]}
							Discrimina ${Scan[$INI]}
							let INI=$INI+1
	
# Si el siguiente elemento de la matriz tiene 18 caracteres, es un dispositivo.
# Si no, el nombre es compuesto y se imprime en la misma línea

							LONG=0
							Nombre=""
							until [ $LONG -eq 18 ]
								do
									if [ $INI -eq $FIN ]
										then
											break
									fi
									let SIG=$INI+1
									LONG=$(echo ${Scan[$SIG]} | wc -m)
									if [ $LONG -eq 18 ]
										then
											Nombre="${Nombre[@]} ${Scan[$INI]}"
											Imprime -b ${Nombre[@]}
											echo "${Scan[$INI]}" > /tmp/n1
										else
											if [ $SIG -eq $FIN ]
												then
													Nombre="${Nombre[@]} ${Scan[$INI]}"
													Imprime -b ${Nombre[@]}
													echo "${Scan[$INI]}" > /tmp/n1
												else
													Nombre="${Nombre[*]} ${Scan[$INI]}"
											fi
											let INI=$INI+1
									fi
								done
							echo "n/a" > /tmp/n2
							RES=$(cmp /tmp/n1 /tmp/n2)
							if [ -z "$RES" ]
								then
									echo No se han podido detectar datos adicionales
								else
									sdptool browse ${Scan[$INI]} > /tmp/.bs
									Provider=($(grep Provider /tmp/.bs | cut -f2 -d ":"))
									Imprime -c ${Provider[0]}
									Imprime -d $(grep Name /tmp/.bs | cut -f2 -d ":")
									Canales=($(grep Channel /tmp/.bs | cut -f2 -d ":"))
									Imprime -e ${Canales[@]}
									rm /tmp/.bs
								fi
							if [ -f /tmp/n1 ]
								then
									rm /tmp/n1
							elif [ -f /tmp/n2 ]
								then
									rm /tmp/n2
							fi
							if [ $(date | cut -f4 -d " " | wc -m) -ne 9 ]
								then
									Imprime -f $(date | cut -f5 -d " ")
								else
									Imprime -f $(date | cut -f4 -d " ")
							fi
							let INI=$INI+1
						done
			fi
		done
	}

Inicio
Scanner $DEV

# Software liberado bajo licencia GNU Genereal Public License (GPL)
# by ~aKira~ 2006
